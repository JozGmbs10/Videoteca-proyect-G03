@model List<EquipoModel>



@{

    ViewData["Title"] = "Equipos Disponibles";



    var message = TempData["Message"] as string;



    int idPrestamo = (int)(TempData["IdPrestamo"] ?? -1);



    var estudiante = ViewData["Estudiante"] as EstudianteModel;

}



<!DOCTYPE html>

<html>

<head>

    <title>Equipos Disponibles</title>

    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">

    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />

    <style>

        .equipment-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            padding: 20px;
        }



        .equipment-card {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            transition: transform 0.2s;
            border: 1px solid #e0e0e0;
        }



            .equipment-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            }



        .equipment-icon {
            font-size: 3em;
            color: #2563eb;
            margin-bottom: 15px;
            text-align: center;
        }



        .equipment-info {
            text-align: center;
        }



        .equipment-name {
            font-size: 1.2em;
            font-weight: bold;
            color: #1f2937;
            margin-bottom: 10px;
        }



        .equipment-lab {
            color: #6b7280;
            margin-bottom: 15px;
        }



        .btn-reserve {
            background-color: #2563eb;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 5px;
            cursor: pointer;
            width: 100%;
            transition: background-color 0.2s;
        }



            .btn-reserve:hover {
                background-color: #1d4ed8;
            }



            .btn-reserve:disabled {
                background-color: #9ca3af;
                cursor: not-allowed;
            }



        .alert {
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 5px;
        }



        .alert-danger {
            background-color: #fee2e2;
            border: 1px solid #ef4444;
            color: #991b1b;
        }



        .alert-info {
            background-color: #dbeafe;
            border: 1px solid #3b82f6;
            color: #1e40af;
        }



        .modal-content {
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            overflow: hidden;
        }

        .modal-header {
            background: linear-gradient(to right, #2563eb, #1d4ed8);
            color: white;
            font-size: 1.25rem;
            font-weight: bold;
            border-bottom: none;
            padding: 20px;
        }

            .modal-header .close {
                color: #ffffff;
                font-size: 1.5rem;
                opacity: 0.8;
            }

                .modal-header .close:hover {
                    opacity: 1;
                    color: #f3f4f6;
                }

        .modal-body {
            padding: 25px;
            background-color: #f9fafb;
        }

        .modal-footer {
            background-color: #f1f5f9;
            border-top: none;
            padding: 15px 25px;
            display: flex;
            justify-content: space-between;
        }

            .modal-footer .btn-reserve {
                padding: 10px 20px;
                font-size: 1rem;
                font-weight: bold;
                border-radius: 8px;
                border: none;
                transition: background-color 0.3s;
            }

                .modal-footer .btn-reserve:first-child {
                    background-color: #1d4ed8;
                    color: #ffffff;
                }

                    .modal-footer .btn-reserve:first-child:hover {
                        background-color: #1e40af;
                    }

                .modal-footer .btn-reserve:last-child {
                    background-color: #9ca3af;
                    color: #ffffff;
                }

                    .modal-footer .btn-reserve:last-child:hover {
                        background-color: #6b7280;
                    }

        .form-group label {
            font-weight: bold;
            color: #1f2937;
        }

        .form-group input,
        .form-group select {
            border: 2px solid #d1d5db;
            border-radius: 8px;
            padding: 10px;
            font-size: 1rem;
            transition: border-color 0.3s;
        }

            .form-group input:focus,
            .form-group select:focus {
                border-color: #2563eb;
                outline: none;
                box-shadow: 0 0 5px rgba(37, 99, 235, 0.5);
            }

        .form-text {
            color: #6b7280;
            font-size: 0.9rem;
        }




        .form-group {
            margin-bottom: 1rem;
        }



        .form-control {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #d1d5db;
            border-radius: 5px;
        }



        .no-equipment {
            text-align: center;
            padding: 40px;
            color: #6b7280;
            font-style: italic;
        }

        
        .close {
            position: absolute;
            top: 10px;
            right: 10px;
            background: transparent;
            border: none;
            font-size: 20px;
            color: #333;
            cursor: pointer;
            transition: transform 0.2s, color 0.2s;
        }

            .close:hover {
                color: #ff5a5a;
                transform: scale(1.2);
            }

    </style>

</head>

<body>

    <div class="container">

        @if (!string.IsNullOrEmpty(message))



        {

            <div class="alert @(message.Contains("Error") || message.Contains("inhabilitada") ? "alert-danger" : "alert-info")" role="alert">

                @message

            </div>

        }



        @if (estudiante != null && estudiante.Estado == "inhabilitado")



        {

            <div class="alert alert-danger" role="alert">

                <strong>Cuenta Inhabilitada</strong>

                <p>Su cuenta de estudiante está actualmente inhabilitada. No puede realizar préstamos de equipos.</p>

                <p>Contacte al administrador para más información.</p>

            </div>

        }



        @if (idPrestamo != -1)



        {

            <div class="alert alert-info" role="alert">

                <strong>¡Atención!</strong> Usted tiene un préstamo pendiente.

                <button class="btn-reserve" id="btnVerPrestamo" data-id="@idPrestamo">Ver Préstamo</button>

            </div>

        }



        <h2 style="margin: 20px 0; color: #1f2937; text-align: center;">Equipos Disponibles</h2>



        <div class="equipment-grid">

            @if (Model != null && Model.Any())

            {



                foreach (var equipo in Model)



                {

                    <div class="equipment-card" data-id="@equipo.IdEquipo">

                        <div class="equipment-icon">

                            <i class="fas fa-desktop"></i>

                        </div>

                        <div class="equipment-info">

                            <div class="equipment-name">Equipo @equipo.IdEquipo</div>

                            <div class="equipment-lab">Laboratorio @equipo.NumLabo</div>

                            @if (estudiante != null && estudiante.Estado == "habilitado" && idPrestamo == -1)

                            {

                                <button class="btn-reserve btn-prestar" data-id="@equipo.IdEquipo">

                                    <i class="fas fa-clock mr-2"></i> Reservar

                                </button>

                            }

                            else

                            {

                                <button class="btn-reserve" disabled>

                                    <i class="fas fa-lock mr-2"></i> No disponible

                                </button>

                            }

                        </div>

                    </div>

                }

            }

            else

            {

                <div class="no-equipment">

                    <i class="fas fa-info-circle" style="font-size: 2em; margin-bottom: 10px;"></i>

                    <p>No hay equipos disponibles en este momento.</p>

                </div>

            }

        </div>

    </div>



    <!-- Modal para agregar préstamo -->
    <div class="modal fade" id="addPrestamoModal" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalLabel">Reservar Equipo</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="addPrestamoForm" method="post" action="@Url.Action("AddPrestamo", "Prestamo")">
                        <div class="form-group">
                            <label for="idEquipo">ID del Equipo:</label>
                            <input type="number" class="form-control" id="idEquipo" name="idEquipo" readonly required />
                        </div>
                        <div class="form-group">
                            <label for="horaInicioPedido">Hora de Inicio:</label>
                            <input type="time"
                                   class="form-control"
                                   id="horaInicioPedido"
                                   name="horaInicioPedido"
                                   required
                                   step="300"
                            data-original-title="La hora debe ser posterior a la actual"
                            data-toggle="tooltip"/>
                            <small class="form-text text-muted">Seleccione una hora posterior a la actual</small>
                        </div>
                        <div class="form-group">
                            <label for="tiempoPedido">Duración de la Reserva:</label>
                            <select class="form-control" id="tiempoPedido" name="tiempoPedido" required>
                                <option value="30">30 minutos</option>
                                <option value="60">1 hora</option>
                                <option value="90">1 hora 30 minutos</option>
                                <option value="120">2 horas</option>
                            </select>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn-reserve">
                                <i class="fas fa-check"></i> Confirmar Reserva
                            </button>
                            <button type="button" class="btn-reserve" style="background-color: #6b7280;" data-dismiss="modal">
                                <i class="fas fa-times"></i> Cancelar
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Agregar estas referencias antes del script existente -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/4.6.0/js/bootstrap.bundle.min.js"></script>

    <script>

        $(document).ready(function () {
            // Agregar estas constantes al inicio del script
            const HORA_APERTURA = 7; // 7:00 AM
            const HORA_CIERRE = 22;  // 10:00 PM

            function isWithinOperatingHours(selectedTime, duracionMinutos) {
                const [hours, minutes] = selectedTime.split(':').map(Number);
                const selectedDate = new Date();
                selectedDate.setHours(hours, minutes, 0, 0);

                // Calcular hora de finalización
                const endDate = new Date(selectedDate.getTime() + duracionMinutos * 60000);
                const endHour = endDate.getHours();

                return hours >= HORA_APERTURA && endHour <= HORA_CIERRE;
            }

            // Mostrar mensaje temporal
            var errorMessage = $("#error-message");
            if (errorMessage.length) {
                errorMessage.show();
                setTimeout(function () {
                    errorMessage.fadeOut();
                }, 3000);
            }

            // Ver préstamo vigente
            $('#btnVerPrestamo').click(function () {
                var idPrestamo = $(this).data('id');
                window.location.href = '@Url.Action("Prestamo", "Prestamo", new { idPrestamo = "__idPrestamo__" })'.replace('__idPrestamo__', idPrestamo);
            });

            // Función para validar la hora
            function isValidTime(selectedTime) {
                const now = new Date();
                const [hours, minutes] = selectedTime.split(':').map(Number);
                const selectedDate = new Date();
                selectedDate.setHours(hours, minutes, 0, 0);

                return selectedDate > now;
            }

            // Establecer hora actual como mínima
            function updateMinTime() {
                const now = new Date();
                const hours = String(now.getHours()).padStart(2, '0');
                const minutes = String(now.getMinutes()).padStart(2, '0');
                const currentTime = `${hours}:${minutes}`;

                // Establecer el atributo min del input time
                $('#horaInicioPedido').attr('min', currentTime);

                // Si no hay hora seleccionada, establecer la hora actual
                if (!$('#horaInicioPedido').val()) {
                    $('#horaInicioPedido').val(currentTime);
                }
            }

            // Botón de préstamo
            $('.btn-prestar').click(function () {
                var idEquipo = $(this).data('id');
                $('#idEquipo').val(idEquipo);
                updateMinTime();
                $('#addPrestamoModal').modal('show');
            });

            // Validación del formulario mejorada
            $('#addPrestamoForm').submit(function (e) {
                e.preventDefault();

                var horaInicio = $('#horaInicioPedido').val();
                var tiempoPedido = $('#tiempoPedido').val();

                if (!isWithinOperatingHours(horaInicio, tiempoPedido)) {
                    alert(`El préstamo debe realizarse dentro del horario de operación (${HORA_APERTURA}:00 - ${HORA_CIERRE}:00)`);
                    return false;
                }

                if (!horaInicio || !tiempoPedido) {
                    alert('Por favor complete todos los campos');
                    return false;
                }

                if (!isValidTime(horaInicio)) {
                    alert('La hora de inicio debe ser posterior a la hora actual');
                    return false;
                }

                // Si todo está bien, enviar el formulario
                this.submit();
            });

            setInterval(updateMinTime, 60000);
            /*
            // Validar cambios en la hora
            $('#horaInicioPedido').on('change', function () {
                if (!isValidTime(this.value)) {
                    alert('La hora seleccionada debe ser posterior a la hora actual');
                    updateMinTime();
                }
            });*/

            // Cerrar modal
            $('.close, button[data-dismiss="modal"]').click(function () {
                $('#addPrestamoModal').modal('hide');
            });
        });

    </script>

</body>

</html>